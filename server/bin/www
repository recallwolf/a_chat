#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
var fs = require('fs');
var path = require('path')

var room1 = []
var room2 = []

io.on('connection', function(socket){
  var roomid = socket.handshake.query.roomid

  if (roomid) {
    socket.join(roomid)
  }

  socket.on('join', function(msg) {
    if (parseInt(roomid) === 1) {
      var index = room1.findIndex((value) => {
        return value.username === msg.username
      })
      if (index > -1) {
        room1.splice(index, 1)
      }
      room1.push({username: msg.username, avatar: msg.avatar, id: socket.id})
      io.to(roomid).emit('onlineUser', room1)
    }
    else if (parseInt(roomid) === 2) {
      var index = room2.findIndex((value) => {
        return value.username === msg.username
      })
      if (index > -1) {
        room2.splice(index, 1)
      }
      room2.push({username: msg.username, avatar: msg.avatar, id: socket.id})
      io.to(roomid).emit('onlineUser', room2)
    }
  })
  
  socket.on('leave', function(msg) {
    if (parseInt(roomid) === 1) {
      var index = room1.findIndex((value) => {
        return value.username === msg.username
      })
      if (index > -1) {
        room1.splice(index, 1)
      }
      io.to(roomid).emit('onlineUser', room1)
    }
    else if (parseInt(roomid) === 2) {
      var index = room2.findIndex((value) => {
        return value.username === msg.username
      })
      if (index > -1) {
        room2.splice(index, 1)
      }
      io.to(roomid).emit('onlineUser', room2)
    }
  })

	socket.on('chat message', function(msg){
    socket.broadcast.to(roomid).emit('chat message', msg)
  })

  socket.on('send file', function(msg) {
    var rawPath = '../public/upload/' + msg.filename
    var filePath = path.resolve(__dirname, rawPath)
    fs.writeFileSync(filePath, msg.file, 'binary')
    socket.emit('send successful')
    socket.broadcast.to(roomid).emit('chat message', msg)
  })

  socket.on('onlineUser', function(room) {
    if (room === 1) {
      console.log(room1)
      socket.emit('onlineUser', room1)
    }
    else if (room === 2) {
      socket.emit('onlineUser', room2)
    }
  })
})
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
